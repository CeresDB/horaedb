DROP TABLE IF EXISTS `h2o_feet`;

affected_rows: 0

CREATE TABLE `h2o_feet` (
    `time` timestamp NOT NULL,
    `level_description` string TAG,
    `location` string TAG,
    `water_level` double,
    timestamp KEY (time)) ENGINE = Analytic WITH (
    enable_ttl = 'false'
);

affected_rows: 0

INSERT INTO h2o_feet(time, level_description, location, water_level)
    VALUES
        (1439827200000, "between 6 and 9 feet", "coyote_creek", 8.12),
        (1439827200000, "below 3 feet", "santa_monica", 2.064),
        (1439827560000, "between 6 and 9 feet", "coyote_creek", 8.005),
        (1439827560000, "below 3 feet", "santa_monica", 2.116),
        (1439827620000, "between 6 and 9 feet", "coyote_creek", 7.887),
        (1439827620000, "below 3 feet", "santa_monica", 2.028);

affected_rows: 6

-- SQLNESS ARG protocol=influxql
SELECT * FROM "h2o_feet";

{"results":[{"statement_id":0,"series":[{"name":"h2o_feet","columns":["time","level_description","location","tsid","water_level"],"values":[[1439827200000,"below 3 feet","santa_monica",8247797837995683878,2.064],[1439827200000,"between 6 and 9 feet","coyote_creek",4483051411356144610,8.12],[1439827560000,"below 3 feet","santa_monica",8247797837995683878,2.116],[1439827560000,"between 6 and 9 feet","coyote_creek",4483051411356144610,8.005],[1439827620000,"below 3 feet","santa_monica",8247797837995683878,2.028],[1439827620000,"between 6 and 9 feet","coyote_creek",4483051411356144610,7.887]]}]}]}

-- SQLNESS ARG protocol=influxql method=get
SELECT * FROM "h2o_feet";

{"results":[{"statement_id":0,"series":[{"name":"h2o_feet","columns":["time","level_description","location","tsid","water_level"],"values":[[1439827200000,"below 3 feet","santa_monica",8247797837995683878,2.064],[1439827200000,"between 6 and 9 feet","coyote_creek",4483051411356144610,8.12],[1439827560000,"below 3 feet","santa_monica",8247797837995683878,2.116],[1439827560000,"between 6 and 9 feet","coyote_creek",4483051411356144610,8.005],[1439827620000,"below 3 feet","santa_monica",8247797837995683878,2.028],[1439827620000,"between 6 and 9 feet","coyote_creek",4483051411356144610,7.887]]}]}]}

-- SQLNESS ARG protocol=influxql
SELECT "level_description", location, water_level FROM "h2o_feet" where location = 'santa_monica';

{"results":[{"statement_id":0,"series":[{"name":"h2o_feet","columns":["time","level_description","location","water_level"],"values":[[1439827200000,"below 3 feet","santa_monica",2.064],[1439827560000,"below 3 feet","santa_monica",2.116],[1439827620000,"below 3 feet","santa_monica",2.028]]}]}]}

-- SQLNESS ARG protocol=influxql
show measurements;

{"results":[{"statement_id":0,"series":[{"name":"measurements","columns":["name"],"values":[["h2o_feet"]]}]}]}

-- SQLNESS ARG protocol=influxql
SELECT count(water_level) FROM "h2o_feet"
group by location;

{"results":[{"statement_id":0,"series":[{"name":"h2o_feet","columns":["time","location","count"],"values":[[0,"coyote_creek",3],[0,"santa_monica",3]]}]}]}

-- SQLNESS ARG protocol=influxql
SELECT count(water_level) FROM "h2o_feet"
group by time(5m), location;

{"code":500,"message":"UNKNOWN_ERROR: Rejection(InfluxDbHandlerWithCause { msg: \"failed to query by influxql\", source: InterpreterExec { query: \" SELECT count(water_level) FROM \\\"h2o_feet\\\" \\n group by time(5m), location;\", source: Select { source: ExecutePlan { source: PhysicalOptimize { source: DataFusionOptimize { source: Plan(\"No installed planner was able to convert the custom node to an execution plan: GapFill { input: Aggregate: groupBy=[[datebin(IntervalDayTime(\\\"300000\\\"), CAST(h2o_feet.time AS Timestamp(Nanosecond, None)), CAST(TimestampMillisecond(0, None) AS Timestamp(Nanosecond, None))) AS time, h2o_feet.location]], aggr=[[COUNT(h2o_feet.water_level)]]\\n  Projection: h2o_feet.time, h2o_feet.location, h2o_feet.water_level\\n    TableScan: h2o_feet projection=[time, location, water_level], group_expr: [time, h2o_feet.location], aggr_expr: [COUNT(h2o_feet.water_level)], params: GapFillParams { stride: IntervalDayTime(\\\"300000\\\"), time_column: time, origin: TimestampMillisecond(0, None), time_range: Unbounded..Excluded(TimestampMillisecond(1680858618837, None) AS now()), fill_strategy: [(COUNT(h2o_feet.water_level), Null)] } }\"), backtrace:"}

DROP TABLE IF EXISTS `h2o_feet`;

affected_rows: 0


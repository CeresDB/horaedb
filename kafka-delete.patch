From dee7d12ee23245efdd08efd4fd8f9b18ddc22e4b Mon Sep 17 00:00:00 2001
From: kamille <caoruiqiu.crq@antgroup.com>
Date: Tue, 27 Jun 2023 14:27:53 +0800
Subject: [PATCH 1/4] fix deleted sequence updating and recover begin offset
 computing.

---
 wal/src/message_queue_impl/region.rs         | 71 +++++++++++---------
 wal/src/message_queue_impl/region_context.rs | 19 +++---
 2 files changed, 50 insertions(+), 40 deletions(-)

diff --git a/wal/src/message_queue_impl/region.rs b/wal/src/message_queue_impl/region.rs
index 37beea03..5ac07340 100644
--- a/wal/src/message_queue_impl/region.rs
+++ b/wal/src/message_queue_impl/region.rs
@@ -148,6 +148,7 @@ impl<M: MessageQueue> Region<M> {
                 region_id,
                 msg: "failed while trying to create topic",
             })?;
+
         message_queue
             .create_topic_if_not_exist(&meta_topic)
             .await
@@ -160,7 +161,7 @@ impl<M: MessageQueue> Region<M> {
 
         // Build region meta.
         let mut region_meta_builder = RegionContextBuilder::new(region_id);
-        let high_watermark_in_snapshot = Self::recover_region_meta_from_meta(
+        let region_safe_delete_offset = Self::recover_region_meta_from_meta(
             namespace,
             region_id,
             message_queue.as_ref(),
@@ -174,7 +175,7 @@ impl<M: MessageQueue> Region<M> {
             namespace,
             region_id,
             message_queue.as_ref(),
-            high_watermark_in_snapshot,
+            region_safe_delete_offset,
             &log_topic,
             &log_encoding,
             &mut region_meta_builder,
@@ -217,7 +218,7 @@ impl<M: MessageQueue> Region<M> {
         meta_topic: &str,
         meta_encoding: &MetaEncoding,
         builder: &mut RegionContextBuilder,
-    ) -> Result<Offset> {
+    ) -> Result<Option<Offset>> {
         info!(
             "Recover region meta from meta, namespace:{}, region id:{}",
             namespace, region_id
@@ -236,7 +237,7 @@ impl<M: MessageQueue> Region<M> {
 
         if high_watermark == 0 {
             debug!("Meta topic is empty, it just needs to recover from log topic, namespace:{}, region id:{}", namespace, region_id);
-            return Ok(0);
+            return Ok(None);
         }
 
         // Fetch snapshot from meta topic(just fetch the last snapshot).
@@ -304,10 +305,18 @@ impl<M: MessageQueue> Region<M> {
                 msg: "failed while recover from meta",
             })?;
 
-        let high_watermark_in_snapshot = value
-            .entries
-            .iter()
-            .fold(0, |hw, entry| cmp::max(hw, entry.current_high_watermark));
+        let min_safe_delete_offset = value.entries.iter().fold(i64::MAX, |min_offset, entry| {
+            match entry.safe_delete_offset {
+                Some(offset) => cmp::min(min_offset, offset),
+                None => min_offset,
+            }
+        });
+
+        let region_safe_delete_offset = if min_safe_delete_offset == i64::MAX {
+            None
+        } else {
+            Some(min_safe_delete_offset)
+        };
 
         builder
             .apply_region_meta_snapshot(value)
@@ -318,24 +327,32 @@ impl<M: MessageQueue> Region<M> {
                 msg: "failed while recover from meta",
             })?;
 
-        Ok(high_watermark_in_snapshot)
+        Ok(region_safe_delete_offset)
     }
 
     async fn recover_region_meta_from_log(
         namespace: &str,
         region_id: u64,
         message_queue: &M,
-        start_offset: Offset,
+        region_safe_delete_offset: Option<Offset>,
         log_topic: &str,
         log_encoding: &CommonLogEncoding,
         builder: &mut RegionContextBuilder,
     ) -> Result<()> {
         info!(
-            "Recover region meta from log, namespace:{}, region id:{}, start offset:{}",
-            namespace, region_id, start_offset
+            "Recover region meta from log, namespace:{}, region_id:{}, region_safe_delete_offset:{:?}",
+            namespace, region_id, region_safe_delete_offset
         );
 
-        // Fetch high watermark and check.
+        let start_offset = match region_safe_delete_offset {
+            Some(offset) => StartOffset::At(offset),
+            None => StartOffset::Earliest,
+        };
+
+        // Fetch snapshot from meta topic(just fetch the last snapshot).
+        // FIXME: should not judge whether topic is empty or not by caller.
+        // The consumer iterator should return immediately rather than hanging when
+        // topic empty.
         let high_watermark = message_queue
             .fetch_offset(log_topic, OffsetType::HighWaterMark)
             .await
@@ -345,19 +362,12 @@ impl<M: MessageQueue> Region<M> {
                 region_id,
                 msg: "failed while recover from log",
             })?;
-
-        ensure!(start_offset <= high_watermark, OpenNoCause { namespace , region_id, msg: format!(
-            "failed while recover from log, start offset should be less than or equal to high watermark, now are:{start_offset} and {high_watermark}")
-        });
-
-        if start_offset == high_watermark {
-            debug!("No region meta delta from log topic is needed, just return, namespace:{}, region id:{}", namespace, region_id);
+        if high_watermark == 0 {
             return Ok(());
         }
 
-        // Fetch snapshot from meta topic(just fetch the last snapshot).
         let mut iter = message_queue
-            .consume(log_topic, StartOffset::At(start_offset))
+            .consume(log_topic, start_offset)
             .await
             .box_err()
             .context(OpenWithCause {
@@ -637,7 +647,7 @@ impl<M: MessageQueue> Region<M> {
     }
 
     /// Return snapshot, just used for test.
-    #[allow(unused)]
+    #[allow(dead_code)]
     async fn make_meta_snapshot(&self) -> RegionMetaSnapshot {
         let inner = self.inner.write().await;
         inner.make_meta_snapshot().await
@@ -907,7 +917,6 @@ mod tests {
     };
 
     #[tokio::test]
-    #[ignore]
     async fn test_region_kafka_impl() {
         // Test region
         let mut config = Config::default();
@@ -962,7 +971,7 @@ mod tests {
                 .write(&WriteContext::default(), test_log_batch)
                 .await
                 .unwrap();
-            assert_eq!(sequence_num, test_log_batch.len() as u64 - 1);
+            assert_eq!(sequence_num, test_log_batch.len() as u64);
 
             mixed_test_payloads.extend_from_slice(test_payloads);
         }
@@ -1079,18 +1088,18 @@ mod tests {
             .write(&WriteContext::default(), test_log_batch)
             .await
             .unwrap();
-        assert_eq!(sequence_num, test_log_batch.len() as u64 - 1);
+        assert_eq!(sequence_num, test_log_batch.len() as u64);
         let sequence_num = test_context
             .region
             .write(&WriteContext::default(), test_log_batch)
             .await
             .unwrap();
-        assert_eq!(sequence_num, test_log_batch.len() as u64 * 2 - 1);
+        assert_eq!(sequence_num, test_log_batch.len() as u64 * 2);
 
         // Mark deleted.
         test_context
             .region
-            .mark_delete_to(table_id, test_log_batch.len() as u64)
+            .mark_delete_to(table_id, test_log_batch.len() as u64 + 1)
             .await
             .unwrap();
         let table_meta = test_context
@@ -1101,11 +1110,11 @@ mod tests {
             .unwrap();
         assert_eq!(
             table_meta.next_sequence_num,
-            test_log_batch.len() as u64 * 2
+            test_log_batch.len() as u64 * 2 + 1,
         );
         assert_eq!(
             table_meta.latest_marked_deleted,
-            test_log_batch.len() as u64
+            test_log_batch.len() as u64 + 1
         );
         assert_eq!(
             table_meta.current_high_watermark,
@@ -1151,7 +1160,7 @@ mod tests {
                     .write(&WriteContext::default(), test_log_batch)
                     .await
                     .unwrap();
-                assert_eq!(sequence_num, test_log_batch.len() as u64 - 1);
+                assert_eq!(sequence_num, test_log_batch.len() as u64);
 
                 mixed_test_payloads.extend_from_slice(test_payloads);
             }
diff --git a/wal/src/message_queue_impl/region_context.rs b/wal/src/message_queue_impl/region_context.rs
index 3b611e59..441eb93c 100644
--- a/wal/src/message_queue_impl/region_context.rs
+++ b/wal/src/message_queue_impl/region_context.rs
@@ -1,4 +1,4 @@
-// Copyright 2022 CeresDB Project Authors. Licensed under Apache-2.0.
+// Copyright 2022-2023 CeresDB Project Authors. Licensed under Apache-2.0.
 
 //! Region context
 
@@ -310,7 +310,7 @@ impl TableMeta {
         // The `start_sequence_offset_mapping` is possible to be incomplete during
         // recovery.
         let offset = inner.start_sequence_offset_mapping.get(&sequence_num);
-        if offset.is_none() && inner.next_sequence_num != inner.latest_marked_deleted {
+        if offset.is_none() && inner.next_sequence_num != sequence_num {
             warn!("Start sequence offset mapping is incomplete, 
             just not update the marked deleted sequence in this flush, new marked deleted, sequence num:{}, previous:{}",
                 sequence_num, inner.latest_marked_deleted);
@@ -469,14 +469,12 @@ impl OffsetRange {
 }
 
 /// Builder for `RegionMeta`
-#[allow(unused)]
 #[derive(Debug)]
 pub struct RegionContextBuilder {
     region_id: u64,
     table_metas: HashMap<TableId, TableMetaInner>,
 }
 
-#[allow(unused)]
 impl RegionContextBuilder {
     pub fn new(region_id: u64) -> Self {
         Self {
@@ -503,6 +501,7 @@ impl RegionContextBuilder {
     pub fn apply_region_meta_delta(&mut self, delta: RegionMetaDelta) -> Result<()> {
         debug!("Apply region meta delta, delta:{:?}", delta);
 
+        // It is likely that snapshot not exist(e.g. no table has ever flushed).
         let mut table_meta = self
             .table_metas
             .entry(delta.table_id)
@@ -522,9 +521,13 @@ impl RegionContextBuilder {
             ) });
         table_meta.current_high_watermark = delta.offset + 1;
 
-        table_meta
-            .start_sequence_offset_mapping
-            .insert(delta.sequence_num, delta.offset);
+        // Because recover from the `region_safe_delete_offset`, some outdated logs will
+        // be loaded.
+        if delta.sequence_num >= table_meta.latest_marked_deleted {
+            table_meta
+                .start_sequence_offset_mapping
+                .insert(delta.sequence_num, delta.offset);
+        }
 
         Ok(())
     }
@@ -557,7 +560,6 @@ impl RegionContextBuilder {
     }
 }
 
-#[allow(unused)]
 #[derive(Debug, Clone)]
 pub struct RegionMetaDelta {
     table_id: TableId,
@@ -565,7 +567,6 @@ pub struct RegionMetaDelta {
     offset: Offset,
 }
 
-#[allow(unused)]
 impl RegionMetaDelta {
     pub fn new(table_id: TableId, sequence_num: SequenceNumber, offset: Offset) -> Self {
         Self {
-- 
2.32.1 (Apple Git-133)


From 17fefa5de7ad20a3b262285f7432a3430d75520b Mon Sep 17 00:00:00 2001
From: kamille <caoruiqiu.crq@antgroup.com>
Date: Tue, 27 Jun 2023 14:39:56 +0800
Subject: [PATCH 2/4] fix kafka related tests and clippy.

---
 .../message_queue/src/kafka/kafka_impl.rs     |  1 +
 components/message_queue/src/tests/cases.rs   |  3 +--
 wal/src/kv_encoder.rs                         | 19 +++----------------
 wal/src/message_queue_impl/encoding.rs        | 14 ++++++--------
 wal/src/message_queue_impl/region.rs          |  1 +
 5 files changed, 12 insertions(+), 26 deletions(-)

diff --git a/components/message_queue/src/kafka/kafka_impl.rs b/components/message_queue/src/kafka/kafka_impl.rs
index 0d69d5e3..0fdfb462 100644
--- a/components/message_queue/src/kafka/kafka_impl.rs
+++ b/components/message_queue/src/kafka/kafka_impl.rs
@@ -284,6 +284,7 @@ impl MessageQueue for KafkaImpl {
             })
     }
 
+    // FIXME: consume a empty topic may be hanged forever...
     async fn consume(
         &self,
         topic_name: &str,
diff --git a/components/message_queue/src/tests/cases.rs b/components/message_queue/src/tests/cases.rs
index 29ab6805..b268db61 100644
--- a/components/message_queue/src/tests/cases.rs
+++ b/components/message_queue/src/tests/cases.rs
@@ -133,8 +133,7 @@ async fn test_consume_empty_topic<T: MessageQueue>(message_queue: &T) {
         .await
         .is_ok());
 
-    // Call produce to push messages at first, then call consume to pull back and
-    // compare.
+    // FIXME: consume a empty topic may be hanged forever...
     let mut iter = message_queue
         .consume(&topic_name, StartOffset::Earliest)
         .await
diff --git a/wal/src/kv_encoder.rs b/wal/src/kv_encoder.rs
index e0e64fa4..c8e56802 100644
--- a/wal/src/kv_encoder.rs
+++ b/wal/src/kv_encoder.rs
@@ -1,4 +1,4 @@
-// Copyright 2022 CeresDB Project Authors. Licensed under Apache-2.0.
+// Copyright 2022-2023 CeresDB Project Authors. Licensed under Apache-2.0.
 
 //! Common Encoding for Wal logs
 
@@ -115,17 +115,15 @@ pub enum Namespace {
 }
 
 /// Log key in old wal design, map the `TableId` to `RegionId`
-#[allow(unused)]
+
 pub type LogKey = (u64, SequenceNumber);
 
-#[allow(unused)]
 #[derive(Debug, Clone)]
 pub struct LogKeyEncoder {
     pub version: u8,
     pub namespace: Namespace,
 }
 
-#[allow(unused)]
 impl LogKeyEncoder {
     /// Create newest version encoder.
     pub fn newest() -> Self {
@@ -202,13 +200,11 @@ impl Decoder<LogKey> for LogKeyEncoder {
     }
 }
 
-#[allow(unused)]
 #[derive(Debug, Clone)]
 pub struct LogValueEncoder {
     pub version: u8,
 }
 
-#[allow(unused)]
 impl LogValueEncoder {
     /// Create newest version encoder.
     pub fn newest() -> Self {
@@ -240,12 +236,10 @@ impl<T: Payload> Encoder<T> for LogValueEncoder {
     }
 }
 
-#[allow(unused)]
 pub struct LogValueDecoder {
     pub version: u8,
 }
 
-#[allow(unused)]
 impl LogValueDecoder {
     pub fn decode<'a>(&self, mut buf: &'a [u8]) -> Result<&'a [u8]> {
         let version = buf.try_get_u8().context(DecodeLogValueHeader)?;
@@ -475,7 +469,6 @@ impl MaxSeqMetaEncoding {
     }
 }
 
-#[allow(unused)]
 #[derive(Debug, Clone)]
 pub struct LogEncoding {
     key_enc: LogKeyEncoder,
@@ -484,7 +477,6 @@ pub struct LogEncoding {
     value_enc_version: u8,
 }
 
-#[allow(unused)]
 impl LogEncoding {
     pub fn newest() -> Self {
         Self {
@@ -589,7 +581,7 @@ impl LogBatchEncoder {
 }
 
 /// Common log key used in multiple wal implementation
-#[allow(unused)]
+
 #[derive(Debug, Copy, Clone, Eq, PartialEq, PartialOrd, Ord)]
 pub struct CommonLogKey {
     /// Id of region which the table belongs to,
@@ -599,7 +591,6 @@ pub struct CommonLogKey {
     pub sequence_num: SequenceNumber,
 }
 
-#[allow(unused)]
 impl CommonLogKey {
     pub fn new(region_id: u64, table_id: TableId, sequence_num: SequenceNumber) -> Self {
         Self {
@@ -610,14 +601,12 @@ impl CommonLogKey {
     }
 }
 
-#[allow(unused)]
 #[derive(Debug, Clone)]
 pub struct CommonLogKeyEncoder {
     pub version: u8,
     pub namespace: Namespace,
 }
 
-#[allow(unused)]
 impl CommonLogKeyEncoder {
     /// Create newest version encoder.
     pub fn newest() -> Self {
@@ -697,7 +686,6 @@ impl Decoder<CommonLogKey> for CommonLogKeyEncoder {
     }
 }
 
-#[allow(unused)]
 #[derive(Debug, Clone)]
 pub struct CommonLogEncoding {
     key_enc: CommonLogKeyEncoder,
@@ -706,7 +694,6 @@ pub struct CommonLogEncoding {
     value_enc_version: u8,
 }
 
-#[allow(unused)]
 impl CommonLogEncoding {
     pub fn newest() -> Self {
         Self {
diff --git a/wal/src/message_queue_impl/encoding.rs b/wal/src/message_queue_impl/encoding.rs
index 86139819..b392711b 100644
--- a/wal/src/message_queue_impl/encoding.rs
+++ b/wal/src/message_queue_impl/encoding.rs
@@ -1,4 +1,4 @@
-// Copyright 2022 CeresDB Project Authors. Licensed under Apache-2.0.
+// Copyright 2022-2023 CeresDB Project Authors. Licensed under Apache-2.0.
 
 //! Meta encoding of wal's message queue implementation
 
@@ -90,25 +90,23 @@ pub enum Error {
 define_result!(Error);
 
 /// Generate wal data topic name
-#[allow(unused)]
+
 pub fn format_wal_data_topic_name(namespace: &str, region_id: u64) -> String {
     format!("{namespace}_data_{region_id}")
 }
 
 /// Generate wal meta topic name
-#[allow(unused)]
+
 pub fn format_wal_meta_topic_name(namespace: &str, region_id: u64) -> String {
     format!("{namespace}_meta_{region_id}")
 }
 
-#[allow(unused)]
 #[derive(Clone, Debug)]
 pub struct MetaEncoding {
     key_enc: MetaKeyEncoder,
     value_enc: MetaValueEncoder,
 }
 
-#[allow(unused)]
 impl MetaEncoding {
     pub fn encode_key(&self, buf: &mut BytesMut, meta_key: &MetaKey) -> manager::Result<()> {
         buf.clear();
@@ -153,6 +151,7 @@ impl MetaEncoding {
         Ok(meta_value.into())
     }
 
+    #[allow(dead_code)]
     pub fn is_meta_key(&self, mut buf: &[u8]) -> manager::Result<bool> {
         self.key_enc
             .is_valid(&mut buf)
@@ -174,20 +173,19 @@ impl MetaEncoding {
 }
 
 /// Message queue implementation's meta key
-#[allow(unused)]
+
 #[derive(Clone, Debug, Eq, PartialEq)]
 pub struct MetaKey(pub u64);
 
-#[allow(unused)]
 #[derive(Clone, Debug)]
 pub struct MetaKeyEncoder {
     pub namespace: Namespace,
     pub version: u8,
 }
 
-#[allow(unused)]
 impl MetaKeyEncoder {
     /// Determine whether the raw bytes is a valid meta key.
+    #[allow(dead_code)]
     pub fn is_valid<B: Buf>(&self, buf: &mut B) -> Result<bool> {
         let namespace = buf.try_get_u8().context(DecodeMetaKey)?;
         let version = buf.try_get_u8().context(DecodeMetaKey)?;
diff --git a/wal/src/message_queue_impl/region.rs b/wal/src/message_queue_impl/region.rs
index 5ac07340..321c1978 100644
--- a/wal/src/message_queue_impl/region.rs
+++ b/wal/src/message_queue_impl/region.rs
@@ -917,6 +917,7 @@ mod tests {
     };
 
     #[tokio::test]
+    #[ignore = "this test need a kafka cluster"]
     async fn test_region_kafka_impl() {
         // Test region
         let mut config = Config::default();
-- 
2.32.1 (Apple Git-133)


From 75f9f8a0da1dab650e93b1fd7372c5d7d91c3069 Mon Sep 17 00:00:00 2001
From: kamille <caoruiqiu.crq@antgroup.com>
Date: Tue, 27 Jun 2023 15:10:15 +0800
Subject: [PATCH 3/4] add logs to inspect wal on kafka.

---
 wal/src/message_queue_impl/region_context.rs | 12 +++++++++++-
 1 file changed, 11 insertions(+), 1 deletion(-)

diff --git a/wal/src/message_queue_impl/region_context.rs b/wal/src/message_queue_impl/region_context.rs
index 441eb93c..b035d15f 100644
--- a/wal/src/message_queue_impl/region_context.rs
+++ b/wal/src/message_queue_impl/region_context.rs
@@ -13,7 +13,7 @@ use common_util::{
     define_result,
     error::{BoxError, GenericError},
 };
-use log::{debug, warn};
+use log::{debug, info, warn};
 use message_queue::{MessageQueue, Offset};
 use snafu::{ensure, Backtrace, OptionExt, ResultExt, Snafu};
 use tokio::sync::{Mutex, RwLock};
@@ -292,6 +292,11 @@ impl TableMeta {
     ) -> std::result::Result<(), String> {
         let mut inner = self.inner.lock().await;
 
+        info!(
+            "Mark deleted entries to table begin, sequence_num:{sequence_num}, table_id:{}, mapping:{:?}",
+            self.table_id, inner.start_sequence_offset_mapping
+        );
+
         // Check the set sequence num's validity.
         if sequence_num > inner.next_sequence_num {
             return Err(format!(
@@ -325,6 +330,11 @@ impl TableMeta {
             .start_sequence_offset_mapping
             .retain(|k, _| k >= &sequence_num);
 
+        info!(
+            "Mark deleted entries to table finish, sequence_num:{sequence_num}, table_id:{}, mapping:{:?}",
+            self.table_id, inner.start_sequence_offset_mapping
+        );
+
         Ok(())
     }
 
-- 
2.32.1 (Apple Git-133)


From 61d0df0eacc07ba90ac96d19843a4e82ee369463 Mon Sep 17 00:00:00 2001
From: kamille <caoruiqiu.crq@antgroup.com>
Date: Wed, 28 Jun 2023 11:33:17 +0800
Subject: [PATCH 4/4] modify `apply_region_meta_delta` to adapt new recover
 start sequence.

---
 wal/src/message_queue_impl/region_context.rs | 11 -----------
 1 file changed, 11 deletions(-)

diff --git a/wal/src/message_queue_impl/region_context.rs b/wal/src/message_queue_impl/region_context.rs
index b035d15f..e2c1ffde 100644
--- a/wal/src/message_queue_impl/region_context.rs
+++ b/wal/src/message_queue_impl/region_context.rs
@@ -517,18 +517,7 @@ impl RegionContextBuilder {
             .entry(delta.table_id)
             .or_insert_with(TableMetaInner::default);
 
-        ensure!(table_meta.next_sequence_num < delta.sequence_num + 1, Build { msg: format!("apply delta failed, 
-                next sequence number in delta should't be less than or equal to the one in builder, but now are:{} and {}",
-                delta.sequence_num + 1,
-                table_meta.next_sequence_num,
-            ) });
         table_meta.next_sequence_num = delta.sequence_num + 1;
-
-        ensure!(table_meta.current_high_watermark < delta.offset + 1, Build { msg: format!("apply delta failed, 
-                high watermark in delta should't be less than or equal to the one in builder, but now are:{} and {}",
-                delta.offset + 1,
-                table_meta.current_high_watermark,
-            ) });
         table_meta.current_high_watermark = delta.offset + 1;
 
         // Because recover from the `region_safe_delete_offset`, some outdated logs will
-- 
2.32.1 (Apple Git-133)

